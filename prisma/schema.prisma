// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "linux-musl"]
  output        = "./client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum EducationLevel {
  UMUM
  PAUD
  SD
  SMP
  SMA
  SMK
}

enum ClassLevel {
  NONCLASS
  I
  II
  III
  IV
  V
  VI
  VII
  VIII
  IX
  X
  XI
  XII
}

enum EbookType {
  BSE
  NONBSE
}

enum Curriculum {
  NONCURRICULUM
  KBK
  KTSP
  K13
  MERDEKA
}

enum MediaType {
  EBOOK
  VIDEO
  AUDIO
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  fullname  String
  ebooks    Ebook[]
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Publisher {
  id        String   @id @default(cuid())
  name      String
  ebooks    Ebook[]
  logoUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  type      MediaType @default(EBOOK)
  ebooks    Ebook[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Ebook {
  id             String         @id @default(cuid())
  title          String
  author         String
  description    String?
  ISBN           String         @unique
  pageCount      Int            @default(0)
  readCount      Int            @default(0)
  curriculum     Curriculum     @default(NONCURRICULUM)
  classLevel     ClassLevel     @default(NONCLASS)
  educationLevel EducationLevel @default(UMUM)
  categoryId     String?
  category       Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  thumbnail      String?
  publishedAt    DateTime       @default(now())
  price          Float          @default(0.0)
  users          User[]
  type           EbookType      @default(NONBSE)
  subjects       Subjects?      @relation(fields: [subjectsId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  subjectsId     String?
  publisher      Publisher?     @relation(fields: [publisherId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  publisherId    String?
  fileUrl        String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Subjects {
  id        String   @id @default(cuid())
  name      String   @unique
  ebooks    Ebook[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
